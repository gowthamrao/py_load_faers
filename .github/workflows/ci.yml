# GitHub Workflow for py-load-faers
#
# This workflow is designed to be secure, efficient, and provide detailed logs.
# It follows DevOps best practices for Python packages using Poetry and Docker.
#
# Key Features:
# - Triggers on push/pull_request to main and develop branches.
# - Cancels redundant runs to save resources.
# - Sets a 15-minute timeout for all jobs.
# - Adheres to the Principle of Least Privilege by default.
# - Pins all GitHub Actions to full commit SHAs for supply chain security.
# - Comprehensive testing across multiple Python versions and Operating Systems.
# - Modern Poetry caching strategy via actions/setup-python.
# - Detailed environment and dependency logging for easier debugging.
# - Separation of unit and integration tests.
# - Uploads detailed coverage reports to Codecov.io with structured flags.
# - Uploads test reports as artifacts on failure.

name: Python CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Set default permissions to read-only for security
permissions:
  contents: read

# Concurrency control to cancel redundant workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-2025]

    steps:
    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

    - name: Install Poetry
      run: |
        python -m pip install --user pipx
        python -m pipx install poetry
        echo "$HOME/.local/bin" >> $GITHUB_PATH
      shell: bash

    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'

    - name: Dump environment details for debugging
      run: |
        echo "OS/Runner: ${{ runner.os }}"
        echo "Python version:"
        python --version
        echo "Poetry version:"
        poetry --version
        echo "Poetry Environment Info:"
        poetry env info
        echo "PATH:"
        echo $PATH
      shell: bash

    - name: Install dependencies
      run: poetry install --no-interaction -vv --with dev

    - name: Verify Dependency Tree
      run: poetry show --tree

    - name: Run Unit Tests
      run: poetry run pytest -vv -m "not integration" --cov=./ --cov-report=xml:coverage-unit.xml

    - name: Run Integration Tests
      run: poetry run pytest -vv -m "integration" --cov=./ --cov-report=xml:coverage-integration.xml

    - name: Upload Unit Test coverage to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage-unit.xml
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}-unit
        fail_ci_if_error: true
        verbose: true

    - name: Upload Integration Test coverage to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage-integration.xml
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}-integration
        fail_ci_if_error: true
        verbose: true

    - name: Upload reports and logs on failure
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      if: failure()
      with:
        name: ci-failure-reports-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage-unit.xml
          coverage-integration.xml